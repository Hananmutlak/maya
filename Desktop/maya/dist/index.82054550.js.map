{"mappings":"ACCA,MAAM,EACF,aAAc,CACV,IAAI,CAAC,UAAU,CAAG,EAAE,CACpB,IAAI,CAAC,eAAe,CAAG,EAAE,AAC7B,CAGA,MAAM,cAAe,CACjB,GAAI,CACA,IAAM,EAAW,MAAM,MAAM,kBAE7B,GAAI,CAAC,EAAS,EAAE,CAAE,MAAM,AAAI,MAAM,qBAClC,CAAA,IAAI,CAAC,UAAU,CAAG,MAAM,EAAS,IAAI,GACrC,IAAI,CAAC,eAAe,CAAG,IAAI,CAAC,UAAU,AAC1C,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,0BAA2B,EAC7C,CACJ,CAGA,cAAc,CAAK,CAAE,CACZ,EAGD,IAAI,CAAC,eAAe,CAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,AAAA,GAC1C,EAAO,UAAU,CAAC,WAAW,GAAG,QAAQ,CAAC,EAAM,WAAW,KAC1D,EAAO,OAAO,CAAC,WAAW,GAAG,QAAQ,CAAC,EAAM,WAAW,KAJ3D,IAAI,CAAC,eAAe,CAAG,IAAI,CAAC,UAAU,AAO9C,CAEA,oBAAqB,CACjB,OAAO,IAAI,CAAC,eAAe,AAC/B,CACJ,CAGA,MAAM,EACF,aAAc,CACV,IAAI,CAAC,SAAS,CAAG,SAAS,aAAa,CAAC,uBACxC,IAAI,CAAC,SAAS,CAAG,SAAS,cAAc,CAAC,YAC7C,CAGA,eAAe,CAAO,CAAE,CACpB,IAAI,CAAC,SAAS,CAAC,SAAS,CAAG,GAC3B,EAAQ,OAAO,CAAC,AAAA,IACZ,IAAM,EAAM,SAAS,aAAa,CAAC,KACnC,CAAA,EAAI,SAAS,CAAG;AACR,oBAAA,EAAE,EAAO,YAAY,CAAC;AACtB,oBAAA,EAAE,EAAO,UAAU,CAAC;AACpB,oBAAA,EAAE,EAAO,OAAO,CAAC;AACjB,oBAAA,EAAE,EAAO,IAAI,CAAC;AACtB,YAAA,CAAC,CACD,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAC/B,EACJ,CAGA,WAAW,CAAO,CAAE,CAChB,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,QAAS,AAAA,IACrC,EAAQ,EAAM,MAAM,CAAC,KAAK,CAC9B,EACJ,CACJ,CAGA,MAAM,EACF,YAAY,CAAK,CAAE,CAAI,CAAE,CACrB,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,IAAI,CAAG,EAGZ,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EACpD,CAGA,MAAM,MAAO,CACT,MAAM,IAAI,CAAC,KAAK,CAAC,YAAY,GAC7B,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB,GAC1D,CAGA,aAAa,CAAK,CAAE,CAChB,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,GACzB,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB,GAC1D,CACJ,CAGA,SAAS,gBAAgB,CAAC,mBAAoB,KAM1C,AAHmB,IAAI,EAFT,IAAI,EACL,IAAI,GAIN,IAAI,EACnB","sources":["<anon>","src/js/script.js"],"sourcesContent":["// نموذج البيانات (Model)\nclass CourseModel {\n    constructor(){\n        this.allCourses = [];\n        this.filteredCourses = [];\n    }\n    // تحميل البيانات من ملف JSON\n    async fetchCourses() {\n        try {\n            const response = await fetch('./courses.json');\n            if (!response.ok) throw new Error('Error loading data');\n            this.allCourses = await response.json();\n            this.filteredCourses = this.allCourses;\n        } catch (error) {\n            console.error('Error fetching courses:', error);\n        }\n    }\n    // تصفية الدورات بناءً على البحث\n    filterCourses(query) {\n        if (!query) this.filteredCourses = this.allCourses;\n        else this.filteredCourses = this.allCourses.filter((course)=>course.courseName.toLowerCase().includes(query.toLowerCase()) || course.teacher.toLowerCase().includes(query.toLowerCase()));\n    }\n    getFilteredCourses() {\n        return this.filteredCourses;\n    }\n}\n// عرض البيانات (View)\nclass CourseView {\n    constructor(){\n        this.tableBody = document.querySelector('#coursesTable tbody');\n        this.searchBox = document.getElementById('searchBox');\n    }\n    // عرض الدورات في الجدول\n    displayCourses(courses) {\n        this.tableBody.innerHTML = ''; // مسح المحتوى القديم\n        courses.forEach((course)=>{\n            const row = document.createElement('tr');\n            row.innerHTML = `\n                <td>${course.courseNumber}</td>\n                <td>${course.courseName}</td>\n                <td>${course.teacher}</td>\n                <td>${course.date}</td>\n            `;\n            this.tableBody.appendChild(row);\n        });\n    }\n    // ربط حدث البحث مع النموذج\n    bindSearch(handler) {\n        this.searchBox.addEventListener('input', (event)=>{\n            handler(event.target.value);\n        });\n    }\n}\n// التحكم بالبيانات والعرض (Controller)\nclass CourseController {\n    constructor(model, view){\n        this.model = model;\n        this.view = view;\n        // ربط أحداث البحث\n        this.view.bindSearch(this.handleSearch.bind(this));\n    }\n    // تحميل البيانات وعرضها\n    async init() {\n        await this.model.fetchCourses();\n        this.view.displayCourses(this.model.getFilteredCourses());\n    }\n    // التعامل مع البحث\n    handleSearch(query) {\n        this.model.filterCourses(query);\n        this.view.displayCourses(this.model.getFilteredCourses());\n    }\n}\n// ربط جميع الأجزاء معًا\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    const model = new CourseModel();\n    const view = new CourseView();\n    const controller = new CourseController(model, view);\n    // تهيئة التطبيق\n    controller.init();\n});\n\n//# sourceMappingURL=index.82054550.js.map\n","// نموذج البيانات (Model)\r\nclass CourseModel {\r\n    constructor() {\r\n        this.allCourses = [];\r\n        this.filteredCourses = [];\r\n    }\r\n\r\n    // تحميل البيانات من ملف JSON\r\n    async fetchCourses() {\r\n        try {\r\n            const response = await fetch('./courses.json');\r\n\r\n            if (!response.ok) throw new Error('Error loading data');\r\n            this.allCourses = await response.json();\r\n            this.filteredCourses = this.allCourses;\r\n        } catch (error) {\r\n            console.error('Error fetching courses:', error);\r\n        }\r\n    }\r\n\r\n    // تصفية الدورات بناءً على البحث\r\n    filterCourses(query) {\r\n        if (!query) {\r\n            this.filteredCourses = this.allCourses;\r\n        } else {\r\n            this.filteredCourses = this.allCourses.filter(course => \r\n                course.courseName.toLowerCase().includes(query.toLowerCase()) ||\r\n                course.teacher.toLowerCase().includes(query.toLowerCase())\r\n            );\r\n        }\r\n    }\r\n\r\n    getFilteredCourses() {\r\n        return this.filteredCourses;\r\n    }\r\n}\r\n\r\n// عرض البيانات (View)\r\nclass CourseView {\r\n    constructor() {\r\n        this.tableBody = document.querySelector('#coursesTable tbody');\r\n        this.searchBox = document.getElementById('searchBox');\r\n    }\r\n\r\n    // عرض الدورات في الجدول\r\n    displayCourses(courses) {\r\n        this.tableBody.innerHTML = '';  // مسح المحتوى القديم\r\n        courses.forEach(course => {\r\n            const row = document.createElement('tr');\r\n            row.innerHTML = `\r\n                <td>${course.courseNumber}</td>\r\n                <td>${course.courseName}</td>\r\n                <td>${course.teacher}</td>\r\n                <td>${course.date}</td>\r\n            `;\r\n            this.tableBody.appendChild(row);\r\n        });\r\n    }\r\n\r\n    // ربط حدث البحث مع النموذج\r\n    bindSearch(handler) {\r\n        this.searchBox.addEventListener('input', event => {\r\n            handler(event.target.value);\r\n        });\r\n    }\r\n}\r\n\r\n// التحكم بالبيانات والعرض (Controller)\r\nclass CourseController {\r\n    constructor(model, view) {\r\n        this.model = model;\r\n        this.view = view;\r\n\r\n        // ربط أحداث البحث\r\n        this.view.bindSearch(this.handleSearch.bind(this));\r\n    }\r\n\r\n    // تحميل البيانات وعرضها\r\n    async init() {\r\n        await this.model.fetchCourses();\r\n        this.view.displayCourses(this.model.getFilteredCourses());\r\n    }\r\n\r\n    // التعامل مع البحث\r\n    handleSearch(query) {\r\n        this.model.filterCourses(query);\r\n        this.view.displayCourses(this.model.getFilteredCourses());\r\n    }\r\n}\r\n\r\n// ربط جميع الأجزاء معًا\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const model = new CourseModel();\r\n    const view = new CourseView();\r\n    const controller = new CourseController(model, view);\r\n\r\n    // تهيئة التطبيق\r\n    controller.init();\r\n});\r\n"],"names":["CourseModel","constructor","allCourses","filteredCourses","fetchCourses","response","fetch","ok","Error","json","error","console","filterCourses","query","filter","course","courseName","toLowerCase","includes","teacher","getFilteredCourses","CourseView","tableBody","document","querySelector","searchBox","getElementById","displayCourses","courses","innerHTML","forEach","row","createElement","courseNumber","date","appendChild","bindSearch","handler","addEventListener","event","target","value","CourseController","model","view","handleSearch","bind","init","controller"],"version":3,"file":"index.82054550.js.map"}